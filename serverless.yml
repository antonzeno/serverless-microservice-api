# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: serverless-nodejs-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-nodejs-api
useDotenv: true
build:
  esbuild: false


provider:
  name: aws
  runtime: nodejs20.x
  environment: 
    DEBUG: ${env:DEBUG, 0}
    DATABASE_URL: ${env:DATABASE_URL, "not set"}
  iam:
    role: 
      name: serverless-ssm-role
      statements: 
        - Effect: 'Allow'
          Resource: '*'
          Action:
            - "ssm:GetParameter"
            - "ssm:GetParameters"
            - "ssm:GetParametersByPath"
            - "ssm:GetParameterHistory"
            - "ssm:DescribeParameters"
            - "sqs:ReceiveMessage"
            - "sqs:DeleteMessage"
            - "sqs:ChangeMessageVisibility"
            - "sqs:GetQueueAttributes"
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "sns:Publish"

resources:
  Resources:
    EmailSqsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: my-sqs-queue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true

    UserRegisterSnsTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: UserRegisterSr.fifo
        FifoTopic: true

    EmailSqsQueuePolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        Queues:
          - Ref: EmailSqsQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action: "sqs:SendMessage"
              Resource:
                Fn::GetAtt: [EmailSqsQueue, Arn]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: UserRegisterSnsTopic

    SQSToSNSTopicSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint: 
          Fn::GetAtt: [EmailSqsQueue, Arn]
        Protocol: "sqs"
        TopicArn: 
          Ref: UserRegisterSnsTopic
        RawMessageDelivery: true

functions:
  api:
    handler: src/index.handler
    events:
      - httpApi: "*"
  userRegister:
    handler: src/handlers/users/handler.register
    events:
      - httpApi:
          path: /users/register
          method: post
  userLogin:
    handler: src/handlers/users/handler.login
    events:
      - httpApi:
          path: /users/login
          method: post
  sendEmail:
    handler: src/handlers/email/handler.send
    events:
      - sqs:
          arn:
            Fn::GetAtt: [EmailSqsQueue, Arn]

package:
  individually: true

custom:
  dotenv:
    exclude: 
      - DATABASE_URL
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-plugin-reducer